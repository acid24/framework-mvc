I feel that the requirement to include a base model class might be a trick. I'll take my chances if it's not. I think it's better that an MVC framework SHOULD NOT provide or impose a structure on the model side because the model is almost invariably different from application to application. Attempting to find an abstraction to cover all models is a recipe for disaster in my opinion. Further, a model is not always database based nor is it always a dumb CRUD. Even further, most of the complex applications have multiple models at play and not all of them are same (one might be a CRUD model, another might be a CQRS model). At least two big frameworks, Symfony2 and Zend Framework, don't include any component to handle the model side. The frameworks that do, either choose to look at the model side as database based (CakePHP), or have one base class with a single method that doesn't do much (CodeIgniter).
